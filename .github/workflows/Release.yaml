name: "CI"
# SECRETS NEEDED:
# DOCKER_USERNAME - Container Registry Username (github or dockerhub)
# DOCKER_ACCESS_TOKEN - Container registry Personal access token with push priveledges
# HELM_CHARTS_PAT - PAT that has access to push to the github based helm charts repo such eg: https://github.com/bsord/helm-charts

on:
  push:
    branches:
      - "master"
      - "main"
      - "develop"

jobs:
  helm-lint:
    name: Lint Helm chart
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Lint Helm chart
        run: helm lint ./chart

  docker-build:
    name: Docker Build
    needs: [helm-lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Define sha_short
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ steps.vars.outputs.sha_short }}
          restore-keys: |
            ${{ runner.os }}-buildx-
          
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
        
      - name: Build & Push Base Image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ github.repository }}:${{ steps.vars.outputs.sha_short }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  chart-test:
    name: Validate Helm chart
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Define sha_short
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.0

      - name: Update chart image tag
        run: |
          sed -r -i 's/(appVersion:[^*])([[:alnum:].]*.*)/\1${{ steps.vars.outputs.sha_short }}/g' ./chart/Chart.yaml

      - name: Create Kind cluster
        uses: helm/kind-action@v1.2.0

      - name: Install and Test chart
        id: test-chart
        run: |
          helm install test-release ./chart --wait --debug
          helm test test-release

      - name: Debug Helm Chart
        if: failure() && steps.test-chart.outcome == 'failure'
        run: |
          kubectl get events
          kubectl describe hpa
          kubectl describe deploy
          kubectl describe ing
          kubectl describe pdb
          kubectl describe svc
          kubectl describe serviceaccount
          kubectl describe po

          for pod in `kubectl get po -o json |  jq '.items[] | .metadata.name' | sed 's/"//g'` ; do
            echo $pod
            kubectl logs $pod 
          done

  release:
    name: "Release"
    needs: [chart-test]
    runs-on: ubuntu-latest
    steps:

      - name: Checkout source code
        uses: "actions/checkout@v2"
        with:
          ref: ${{ github.ref }}

      - name: Bump version and push tag
        id: bump-tag
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BRANCHES: "master,main"
          DEFAULT_BUMP: "patch"
          INITIAL_VERSION: "1.0.0"

      - name: Update version in version files
        id: update-version
        run: |
          # Update package.json
          npm version ${{ steps.bump-tag.outputs.new_tag }} --no-git-tag-version
          # Update Helm chart version
          sed -r -i "s/(version:[^*]|appVersion:[^*])([[:alnum:].]*.*)/\1${{ steps.bump-tag.outputs.new_tag }}/g" ./chart/Chart.yaml

      - name: Build Docker Tags
        id: docker-tags
        run: |
          CUR_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if [[ $CUR_BRANCH = "main" || $CUR_BRANCH = "master" ]]; then
              TAGS="${{ github.repository }}:${{ steps.bump-tag.outputs.new_tag }},${{ github.repository }}:latest"
          else
              TAGS="${{ github.repository }}:${{ steps.bump-tag.outputs.new_tag }}"
          fi
          echo "::set-output name=tags::${TAGS}"
          
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ steps.vars.outputs.sha_short }}
          restore-keys: |
            ${{ runner.os }}-buildx-
          
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
        
      - name: Build & Push Base Image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{ steps.docker-tags.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Package and publish Helm Chart
        run: |
          # Setup auth and workspace
          CLONE_DIR=$(mktemp -d)
          git config --global user.email "brandon.sorgdrager@gmail.com"
          git config --global user.name "bsord"
          git clone "https://${{ secrets.HELM_CHARTS_PAT }}@github.com/bsord/helm-charts.git" "$CLONE_DIR"
          
          # Package chart and push commit
          helm package ./chart
          cp *.tgz "$CLONE_DIR/packages/"
          cd "$CLONE_DIR"
          git add .
          git commit --message "Update from https://github.com/$GITHUB_REPOSITORY/commit/$GITHUB_SHA"
          git push -u origin main